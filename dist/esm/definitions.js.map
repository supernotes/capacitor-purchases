{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,qFAAoB,CAAA;IACpB,iEAAU,CAAA;IACV,uEAAa,CAAA;IACb,iEAAU,CAAA;IACV,iEAAU,CAAA;IACV,qEAAY,CAAA;AACd,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;AAED,MAAM,CAAN,IAAY,aAUX;AAVD,WAAY,aAAa;IACvB;;OAEG;IACH,gCAAe,CAAA;IAEf;;OAEG;IACH,8BAAa,CAAA;AACf,CAAC,EAVW,aAAa,KAAb,aAAa,QAUxB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,eAyBX;AAzBD,WAAY,eAAe;IACzB;;OAEG;IACH,uEAAa,CAAA;IAEb;;OAEG;IACH,qFAAoB,CAAA;IAEpB;;OAEG;IACH,iFAAkB,CAAA;IAElB;;OAEG;IACH,mFAAmB,CAAA;IAEnB;;OAEG;IACH,+FAAyB,CAAA;AAC3B,CAAC,EAzBW,eAAe,KAAf,eAAe,QAyB1B;AACD,MAAM,CAAN,IAAY,cA2BX;AA3BD,WAAY,cAAc;IACxB,qIAAiD,CAAA;IAEjD;;;OAGG;IACH,qGAAiC,CAAA;IAEjC;;;;OAIG;IACH,iHAAuC,CAAA;IAEvC;;;OAGG;IACH,iGAA+B,CAAA;IAE/B;;;OAGG;IACH,2DAAY,CAAA;AACd,CAAC,EA3BW,cAAc,KAAd,cAAc,QA2BzB;AAED,MAAM,CAAN,IAAY,YA6CX;AA7CD,WAAY,YAAY;IACtB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,qCAAqB,CAAA;IAErB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,2CAA2B,CAAA;IAE3B;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;AACnB,CAAC,EA7CW,YAAY,KAAZ,YAAY,QA6CvB;AAED,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAClC;;OAEG;IACH,+HAAoC,CAAA;IACpC;;OAEG;IACH,qIAAmC,CAAA;IACnC;;OAEG;IACH,iIAAiC,CAAA;AACnC,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\n\nexport enum ATTRIBUTION_NETWORK {\n  APPLE_SEARCH_ADS = 0,\n  ADJUST = 1,\n  APPSFLYER = 2,\n  BRANCH = 3,\n  TENJIN = 4,\n  FACEBOOK = 5,\n}\n\nexport enum PURCHASE_TYPE {\n  /**\n   * A type of SKU for in-app products.\n   */\n  INAPP = \"inapp\",\n\n  /**\n   * A type of SKU for subscriptions.\n   */\n  SUBS = \"subs\",\n}\n\n/**\n * Enum for billing features.\n * Currently, these are only relevant for Google Play Android users:\n * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType\n */\nexport enum BILLING_FEATURE {\n  /**\n   * Purchase/query for subscriptions.\n   */\n  SUBSCRIPTIONS,\n\n  /**\n   * Subscriptions update/replace.\n   */\n  SUBSCRIPTIONS_UPDATE,\n\n  /**\n   * Purchase/query for in-app items on VR.\n   */\n  IN_APP_ITEMS_ON_VR,\n\n  /**\n   * Purchase/query for subscriptions on VR.\n   */\n  SUBSCRIPTIONS_ON_VR,\n\n  /**\n   * Launch a price change confirmation flow.\n   */\n  PRICE_CHANGE_CONFIRMATION,\n}\nexport enum PRORATION_MODE {\n  UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY = 0,\n\n  /**\n   * Replacement takes effect immediately, and the remaining time will be\n   * prorated and credited to the user. This is the current default behavior.\n   */\n  IMMEDIATE_WITH_TIME_PRORATION = 1,\n\n  /**\n   * Replacement takes effect immediately, and the billing cycle remains the\n   * same. The price for the remaining period will be charged. This option is\n   * only available for subscription upgrade.\n   */\n  IMMEDIATE_AND_CHARGE_PRORATED_PRICE = 2,\n\n  /**\n   * Replacement takes effect immediately, and the new price will be charged on\n   * next recurrence time. The billing cycle stays the same.\n   */\n  IMMEDIATE_WITHOUT_PRORATION = 3,\n\n  /**\n   * Replacement takes effect when the old plan expires, and the new price will\n   * be charged at the same time.\n   */\n  DEFERRED = 4,\n}\n\nexport enum PACKAGE_TYPE {\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  UNKNOWN = \"UNKNOWN\",\n\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  CUSTOM = \"CUSTOM\",\n\n  /**\n   * A package configured with the predefined lifetime identifier.\n   */\n  LIFETIME = \"LIFETIME\",\n\n  /**\n   * A package configured with the predefined annual identifier.\n   */\n  ANNUAL = \"ANNUAL\",\n\n  /**\n   * A package configured with the predefined six month identifier.\n   */\n  SIX_MONTH = \"SIX_MONTH\",\n\n  /**\n   * A package configured with the predefined three month identifier.\n   */\n  THREE_MONTH = \"THREE_MONTH\",\n\n  /**\n   * A package configured with the predefined two month identifier.\n   */\n  TWO_MONTH = \"TWO_MONTH\",\n\n  /**\n   * A package configured with the predefined monthly identifier.\n   */\n  MONTHLY = \"MONTHLY\",\n\n  /**\n   * A package configured with the predefined weekly identifier.\n   */\n  WEEKLY = \"WEEKLY\",\n}\n\nexport enum INTRO_ELIGIBILITY_STATUS {\n  /**\n   * RevenueCat doesn't have enough information to determine eligibility.\n   */\n  INTRO_ELIGIBILITY_STATUS_UNKNOWN = 0,\n  /**\n   * The user is not eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_INELIGIBLE,\n  /**\n   * The user is eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_ELIGIBLE,\n}\n\n/**\n * The EntitlementInfo object gives you access to all of the information about the status of a user entitlement.\n */\nexport interface EntitlementInfo {\n  /**\n   * The entitlement identifier configured in the RevenueCat dashboard\n   */\n  readonly identifier: string;\n  /**\n   * True if the user has access to this entitlement\n   */\n  readonly isActive: boolean;\n  /**\n   * True if the underlying subscription is set to renew at the end of the billing period (expirationDate).\n   * Will always be True if entitlement is for lifetime access.\n   */\n  readonly willRenew: boolean;\n  /**\n   * The last period type this entitlement was in. Either: NORMAL, INTRO, TRIAL.\n   */\n  readonly periodType: string;\n  /**\n   * The latest purchase or renewal date for the entitlement.\n   */\n  readonly latestPurchaseDate: string;\n  /**\n   * The first date this entitlement was purchased.\n   */\n  readonly originalPurchaseDate: string;\n  /**\n   * The expiration date for the entitlement, can be `null` for lifetime access. If the `periodType` is `trial`,\n   * this is the trial expiration date.\n   */\n  readonly expirationDate: string | null;\n  /**\n   * The store where this entitlement was unlocked from. Either: appStore, macAppStore, playStore, stripe,\n   * promotional, unknownStore\n   */\n  readonly store: string;\n  /**\n   * The product identifier that unlocked this entitlement\n   */\n  readonly productIdentifier: string;\n  /**\n   * False if this entitlement is unlocked via a production purchase\n   */\n  readonly isSandbox: boolean;\n  /**\n   * The date an unsubscribe was detected. Can be `null`.\n   *\n   * @note: Entitlement may still be active even if user has unsubscribed. Check the `isActive` property.\n   */\n  readonly unsubscribeDetectedAt: string | null;\n  /**\n   * The date a billing issue was detected. Can be `null` if there is no billing issue or an issue has been resolved\n   *\n   * @note: Entitlement may still be active even if there is a billing issue. Check the `isActive` property.\n   */\n  readonly billingIssueDetectedAt: string | null;\n}\n\n/**\n * Contains all the entitlements associated to the user.\n */\nexport interface EntitlementInfos {\n  /**\n   * Map of all EntitlementInfo (`PurchasesEntitlementInfo`) objects (active and inactive) keyed by entitlement identifier.\n   */\n  readonly all: { [key: string]: EntitlementInfo };\n  /**\n   * Map of active EntitlementInfo (`PurchasesEntitlementInfo`) objects keyed by entitlement identifier.\n   */\n  readonly active: { [key: string]: EntitlementInfo };\n}\n\nexport interface Transaction {\n  /**\n   * RevenueCat Id associated to the transaction.\n   */\n  readonly transactionIdentifier: string;\n  /**\n   * Product Id associated with the transaction.\n   */\n  readonly productIdentifier: string;\n  /**\n   * Purchase date of the transaction in ISO 8601 format.\n   */\n  readonly purchaseDate: string;\n}\n\nexport interface CustomerInfo {\n  /**\n   * Entitlements attached to this purchaser info\n   */\n  readonly entitlements: EntitlementInfos;\n  /**\n   * Set of active subscription skus\n   */\n  readonly activeSubscriptions: [string];\n  /**\n   * Set of purchased skus, active and inactive\n   */\n  readonly allPurchasedProductIdentifiers: [string];\n  /**\n   * Returns all the non-subscription  a user has made.\n   * The  are ordered by purchase date in ascending order.\n   */\n  readonly nonSubscriptionTransactions: Transaction[];\n  /**\n   * The latest expiration date of all purchased skus\n   */\n  readonly latestExpirationDate: string | null;\n  /**\n   * The date this user was first seen in RevenueCat.\n   */\n  readonly firstSeen: string;\n  /**\n   * The original App User Id recorded for this user.\n   */\n  readonly originalAppUserId: string;\n  /**\n   * Date when this info was requested\n   */\n  readonly requestDate: string;\n  /**\n   * Returns the version number for the version of the application when the\n   * user bought the app. Use this for grandfathering users when migrating\n   * to subscriptions.\n   *\n   * This corresponds to the value of CFBundleVersion (in iOS) in the\n   * Info.plist file when the purchase was originally made. This is always null\n   * in Android\n   */\n  readonly originalApplicationVersion: string | null;\n  /**\n   * Returns the purchase date for the version of the application when the user bought the app.\n   * Use this for grandfathering users when migrating to subscriptions.\n   */\n  readonly originalPurchaseDate: string | null;\n  /**\n   * URL to manage the active subscription of the user. If this user has an active iOS\n   * subscription, this will point to the App Store, if the user has an active Play Store subscription\n   * it will point there. If there are no active subscriptions it will be null.\n   * If there are multiple for different platforms, it will point to the device store.\n   */\n  readonly managementURL: string | null;\n}\nexport interface SubscriptionPeriod {\n  /**\n   * The Subscription Period number of unit.\n   */\n  readonly numberOfUnits: number;\n  /**\n   * The Subscription Period unit.\n   */\n  readonly unit: number;\n}\nexport interface SKProductDiscount {\n  /**\n   * The Product discount identifier.\n   */\n  readonly identifier: string;\n  /**\n   * The Product discount type.\n   */\n  readonly type: number;\n  /**\n   * The Product discount price.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * The Product discount currency symbol.\n   */\n  readonly currencySymbol: string;\n  /**\n   * The Product discount currency code.\n   */\n  readonly currencyCode: string;\n  /**\n   * The Product discount paymentMode.\n   */\n  readonly paymentMode: number;\n  /**\n   * The Product discount number Of Periods.\n   */\n  readonly numberOfPeriods: number;\n  /**\n   * The Product discount subscription period.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n}\nexport interface Product {\n  /**\n   * Product Id.\n   */\n  readonly identifier: string;\n  /**\n   * Description of the product.\n   */\n  readonly description: string;\n  /**\n   * Title of the product.\n   */\n  readonly title: string;\n  /**\n   * Price of the product in the local currency.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * Currency code for price and original price.\n   */\n  readonly currencyCode: string;\n  /**\n   * Currency symbol for price and original price.\n   */\n  readonly currencySymbol: string;\n  /**\n   * Boolean indicating if the product is sharable with family\n   */\n  readonly isFamilyShareable: boolean;\n  /**\n   * Group identifier for the product.\n   */\n  readonly subscriptionGroupIdentifier: string;\n  /**\n   * The Product subcription group identifier.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n  /**\n   * The Product introductory Price.\n   */\n  readonly introductoryPrice: SKProductDiscount | null;\n  /**\n   * The Product discounts list.\n   */\n  readonly discounts: SKProductDiscount[];\n}\n\n/**\n * Contains information about the product available for the user to purchase.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface Package {\n  /**\n   * Unique identifier for this package. Can be one a predefined package type or a custom one.\n   */\n  readonly identifier: string;\n  /**\n   * Package type for the product. Will be one of [PACKAGE_TYPE].\n   */\n  readonly packageType: PACKAGE_TYPE;\n  /**\n   * Product assigned to this package.\n   */\n  readonly product: Product;\n  /**\n   * Offering this package belongs to.\n   */\n  readonly offeringIdentifier: string;\n}\n\n/**\n * An offering is a collection of Packages (`PurchasesPackage`) available for the user to purchase.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface Offering {\n  /**\n   * Unique identifier defined in RevenueCat dashboard.\n   */\n  readonly identifier: string;\n  /**\n   * Offering description defined in RevenueCat dashboard.\n   */\n  readonly serverDescription: string;\n  /**\n   * Array of `Package` objects available for purchase.\n   */\n  readonly availablePackages: Package[];\n  /**\n   * Lifetime package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly lifetime: Package | null;\n  /**\n   * Annual package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly annual: Package | null;\n  /**\n   * Six month package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly sixMonth: Package | null;\n  /**\n   * Three month package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly threeMonth: Package | null;\n  /**\n   * Two month package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly twoMonth: Package | null;\n  /**\n   * Monthly package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly monthly: Package | null;\n  /**\n   * Weekly package type configured in the RevenueCat dashboard, if available.\n   */\n  readonly weekly: Package | null;\n}\n\n/**\n * Contains all the offerings configured in RevenueCat dashboard.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface Offerings {\n  /**\n   * Map of all Offerings [PurchasesOffering] objects keyed by their identifier.\n   */\n  readonly all: { [key: string]: Offering };\n  /**\n   * Current offering configured in the RevenueCat dashboard.\n   */\n  readonly current: Offering | null;\n}\n\nexport interface Error {\n  code: number;\n  message: string;\n  readableErrorCode: string;\n  underlyingErrorMessage?: string;\n}\n\n/**\n * Holds the information used when upgrading from another sku. For Android use only.\n */\nexport interface UpgradeInfo {\n  /**\n   * The oldSKU to upgrade from.\n   */\n  readonly oldSKU: string;\n  /**\n   * The [PRORATION_MODE] to use when upgrading the given oldSKU.\n   */\n  readonly prorationMode?: PRORATION_MODE;\n}\n\n/**\n * Holds the introductory price status\n */\nexport interface IntroEligibility {\n  /**\n   * The introductory price eligibility status\n   */\n  readonly status: INTRO_ELIGIBILITY_STATUS;\n  /**\n   * Description of the status\n   */\n  readonly description: string;\n}\n\n/**\n * Holds the logIn result\n */\nexport interface LogInResult {\n  /**\n   * The Purchaser Info for the user.\n   */\n  readonly customerInfo: CustomerInfo;\n  /**\n   * True if the call resulted in a new user getting created in the RevenueCat backend.\n   */\n  readonly created: boolean;\n}\n\nexport type ShouldPurchasePromoProductListener = (\n  deferredPurchase: () => void\n) => void;\n\nexport interface CapacitorPurchasesPlugin {\n  /**\n   * Sets up  with your API key and an app user id.\n   * @param {string} apiKey RevenueCat API Key. Needs to be a string\n   * @param {string} [appUserID] The unique app user id for this user.\n   * This user id will allow users to share their purchases and subscriptions across devices.\n   * Leave empty if you want RevenueCat to generate this for you.\n   * @param {boolean} [observerMode = false] Set this to true if you have your own IAP implementation\n   * @param {boolean} [enableAdServicesAttribution = false] Set this to true if you want to use Apple's Search Ads attribution collection.\n   * @param {boolean} [collectDeviceIdentifiers = false] Set this to true if you want to collect the device identifiers.\n   * and want to use only RevenueCat’s backend. Default is false.\n   */\n  setup(data: {\n    apiKey: string;\n    appUserID?: string;\n    observerMode?: boolean;\n    enableAdServicesAttribution?: boolean;\n    collectDeviceIdentifiers?: boolean;\n  }): Promise<void>;\n\n  /**\n   * Called when partialResults set to true and result received\n   *\n   * Provides partial result.\n   *\n   * @since 2.0.2\n   */\n  addListener(\n    eventName: \"purchasesUpdate\",\n    listenerFunc: (data: {\n      purchases: Package;\n      customerInfo: CustomerInfo;\n    }) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Gets the Offerings configured in the RevenueCat dashboard\n   */\n  getOfferings(): Promise<{ offerings: Offerings }>;\n\n  /**\n   * Make a purchase\n   *\n   * @param {PurchasesPackage} aPackage The Package you wish to purchase. You can get the Packages by calling getOfferings\n   */\n  purchasePackage(data: {\n    // aPackage: Package,\n    identifier: string;\n    offeringIdentifier: string;\n    oldSKU?: string | null;\n  }): Promise<{ customerInfo: CustomerInfo }>;\n\n  /**\n   * Restores a user's previous  and links their appUserIDs to any user's also using those .\n   */\n  restorePurchases(): Promise<{ customerInfo: CustomerInfo }>;\n\n  /**\n   * Subscriber attributes are useful for storing additional, structured information on a user.\n   * Since attributes are writable using a public key they should not be used for\n   * managing secure or sensitive information such as subscription status, coins, etc.\n   *\n   * Key names starting with \"$\" are reserved names used by RevenueCat. For a full list of key\n   * restrictions refer to our guide: https://docs.revenuecat.com/docs/subscriber-attributes\n   *\n   * @param attributes Map of attributes by key. Set the value as an empty string to delete an attribute.\n   */\n  setAttributes(data: {\n    attributes: { [key: string]: string | null };\n  }): Promise<void>;\n\n  /**\n   * This function will logIn the current user with an appUserID. Typically this would be used after a log in\n   * to identify a user without calling configure.\n   * @param {String} appUserID The appUserID that should be linked to the currently user\n   * @param {function(LogInResult):void} callback Callback that will receive an object that contains the customerInfo after logging in, as well as a boolean indicating\n   * whether the user has just been created for the first time in the RevenueCat backend.\n   * @param {function(PurchasesError):void} errorCallback Callback that will be triggered whenever there is any problem logging in.\n   */\n  logIn(data: { appUserID: string }): Promise<LogInResult>;\n\n  /**\n   * Logs out the  client clearing the saved appUserID. This will generate a random user id and save it in the cache.\n   * If the current user is already anonymous, this will produce a Error.\n   * @param {function(CustomerInfo):void} callback Callback that will receive the new purchaser info after resetting\n   * @param {function(PurchasesError):void} errorCallback Callback that will be triggered whenever there is an error when logging out.\n   * This could happen for example if logOut is called but the current user is anonymous.\n   */\n  logOut(): Promise<{ customerInfo: CustomerInfo }>;\n\n  /**\n   * Gets the current purchaser info. This call will return the cached purchaser info unless the cache is stale, in which case,\n   * it will make a network call to retrieve it from the servers.\n   * @param {function(CustomerInfo):void} callback Callback that will receive the purchaser info\n   * @param {function(PurchasesError, boolean):void} errorCallback Callback that will be triggered whenever there is any problem retrieving the purchaser info\n   */\n  getCustomerInfo(): Promise<{ customerInfo: CustomerInfo }>;\n\n  /**\n   * Enables/Disables debugs logs\n   * @param {boolean} enabled Enable or not debug logs\n   */\n  setDebugLogsEnabled(data: { enabled: boolean }): Promise<void>;\n}\n"]}